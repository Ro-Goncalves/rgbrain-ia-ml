import streamlit as st
from langchain_community.llms import HuggingFaceEndpoint
from langchain_community.llms.huggingface_pipeline import HuggingFacePipeline
from langchain_core.prompts.prompt import PromptTemplate
from langchain.chains.llm import LLMChain
from transformers import AutoTokenizer
import transformers
import torch

st.set_page_config(
    page_title = "An√°lise Sentimento",
    page_icon = "üìà"
)

def _model():
    return 'mistralai/Mixtral-8x7B-Instruct-v0.1'


# def _auto_tokenizer():   
#     return AutoTokenizer.from_pretrained(_model())


# def _pipeline():
#     tokenizer = _auto_tokenizer()
#     pipeline = transformers.pipeline(
#         "text-generation",
#         model = _model(),
#         tokenizer=tokenizer,
#         torch_dtype=torch.float16,       
#         max_length=1000,
#         do_sample=True,
#         top_k=20,
#         num_return_sequences=1,
#         eos_token_id=tokenizer.eos_token_id,
#         token=''
#     )
    
#     return pipeline


def _llm():
    # return HuggingFacePipeline(pipeline=_pipeline(), model_kwargs={'temperature': 0.5})
    return HuggingFaceEndpoint(
        repo_id=_model(),
        huggingfacehub_api_token='', 
        temperature=0.5,
        model_kwargs={'max_length':512})


def _template():
    # return """
    #     Recognize all aspect terms with their corresponding sentiment polarity in the given review delimited by triple quotes. The aspect terms are nouns or phrases appearing in the review that indicate specific aspects or features of the product/service. Determine the sentiment polarity from the options [\"positive\", \"negative\", \"neutral\"]. Answer in the format [\"aspect\", \"sentiment\"] without any explanation. If no aspect term exists, then only answer \"[]\"."
    #     ```{text}```
    # """
    return """
        Reconhe√ßa todos os termos de aspecto com sua polaridade de sentimento correspondente
        na revis√£o dada delimitada por aspas triplas. Os termos de aspecto s√£o substantivos 
        ou frases que aparecem na revis√£o que indicam aspectos ou caracter√≠sticas espec√≠ficas 
        do produto/servi√ßo. Determine a polaridade de sentimento a partir das op√ß√µes 
        [\"positiva\", \"negativa\", \"neutra\"]. 
        Responda no formato [\"aspecto\", \"sentimento\"] sem qualquer explica√ß√£o. 
        Se nenhum termo de aspecto existir, ent√£o responda apenas "[]"."
        ```{text}```
    """

def _llm_chain():
    prompt = PromptTemplate(template=_template(), input_variables=['text'])
    return LLMChain(prompt=prompt, llm=_llm())

LLM_CHAIN = _llm_chain()


st.markdown("""
    # Como Voc√™ Est√° Se Sentindo Hoje
    ---
            
    Essa √© uma demo que demonstra como o ***Zero Shot Classification*** funciona. Tentaremos 
    extrair os apspectios e o sentimento sobre ele.    
""")

st.session_state.texto = st.text_input('Diga-Me o que sente')

if st.session_state.texto:
    st.markdown("""
        ### Eis o que eu penso sobre voc√™ ...
        ---
    """)
    response = LLM_CHAIN.invoke(st.session_state.texto)
    st.markdown(response)
    